<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEARwBHAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwg
        JC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAEZAcIDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDaFPApBTxQAoFPApAKeBQAoFPApAKeBQAoFPApAKeBQAoFPApA
        KeBQAAU8CgCnAUAAFOApQKcBQAAUoFKBTgKAExTsUoFLigBMUuKcBS4oAbilxTsUuKAG4pcU7FGKAG4o
        xTsUuKAGYoxTsUYoAZijFPxRigCPFJipMUmKAI8UmKkxSYoAjxTSKkIpCKAIiKaRUpFNIoAiIppFSkUw
        igCIimEVMRTCKAIiKYRUpFNIoAhIphFTlaYRQBAVppFTEVGRQBCRTCKmIqMigCIioyKmIqMigCE0wipi
        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
</value>
  </data>
</root>